import sys

# user input is *always* gathered as a string
# and needs to be converted if we want something else
# from ftplib import print_line

'''age = input("Please enter your age: ")
print(type(age)) # checking up on current type

age = int(age)
print(type(age)) # successfully converted the user input to an integer'''

'''name = 'CodingNomads'
print(len(name))'''

'''name = 'sean'
print(name.capitalize())'''

# Using string slicing, and the string method, .capitalize(), change the following code so that it prints Nana


'''fruit = "banana"
print(fruit[2:6].capitalize())'''

'''name = "Albert Smith"
name[6:] = " Einstein"
print(name)'''

'''name = "Albert Smith"
new_name = name[:6] + " Einstein"
print(new_name)'''

'''name = "python"[2:]
print(name)'''

'''txt = "Hello, welcome to my world."

x = txt.find("e")

print(x)'''

'''number = 23

guess = int(input("Enter a number :"))

if guess == number:
    print("Good job")
    print("But you dont get anything")

elif guess < number:
    print("too low bro")
    print("guess again")

else:
    print("that was way to high, try again")

#print("Done")'''

'''flag = "poop"
if flag == "not poop":
    print("WOooop worm wiggle")

else:
    print("ewww worms")'''

# number = 5

'''number = int(input("yo bro guess a number: "))

if number == 10:
    print("It's 5")

elif number < 5:
    print("so low bro!")

elif number > 5 and number < 20:
    print("Pretty decent")

else:
    print("whoa slow down, Way too high")'''

# Task
# Given an integer, , perform the following conditional actions:

# If  is odd, print Weird
# If  is even and in the inclusive range of 2 to 5, print Not Weird
# If  is even and in the inclusive range of 6 to 20, print Weird
# If  is even and greater than 20, print Not Weird


'''number = 23
runnning = True

while runnning:
    guess = int(input("Enter an Integer: "))

    if guess == number:
        print("Congrats, you guessed it")
        # this causes the while loop to stop
        running = False
    elif guess < number:
        print("No, it's a little higher than that")
    else:
        print("no its a little lower than that")

else:
    print("The while loop is over")


print("Done")'''

'''location = "west"

if location == "east":
    print("Hello west side")

else:
    print("hello east side")'''

'''for i in range(1, 20):
    print(i)
else:
    print("poop")'''

'''my_list = ["cheese", "milk", "cookies"]

for item in my_list:
    print(item)'''

'''names = ["Sean", "Adrian", "John", "Jessie"]

for name in names:
    print(name)'''

'''my_list = [1, 2, 3, 4, 5, 6]

for num in my_list:
    if num % 3 == 0:
        break
    print(num)
print("Finished 'break' part")

for num in my_list:
    if num % 3 == 0:
        continue
    print(num)
print("finished 'continue' part")'''

'''numbers = range(1,11)

for num in numbers:
    print(num)'''

# Using the list provided below, write a for loop to iterate over the list and find (and print) the sum of all the numbers in the list.
'''example_list = [2, 5, 7, 9, 3, 8, 8]

sum = 0

for num in example_list:
    sum += num
print(sum)'''

'''count = 5
while count > 0:
    print(count)
    count -= 1

while True:
        prompt = input("say something: ")
        if prompt == "quit":
            break
        print(prompt[::-1])
print("bye!! (it's tiuq, btw.")'''

'''name = ''

while name != 'your name':
    print('please print your name')
    name = input()

print('Thank you')'''

people = [
    ['Bilbo', 'Baggins'],
    ['Gollum'],
    ['Tom', 'Bombadil'],
    ['Aragorn']
]

# Change everything below here to use while loops instead
'''for person in people:
    to_print = ""
    for name in person:
        to_print += name + " "
    print(to_print)
# Change everything below here to use while loops instead
i = 0
while i < len(people):
    person = people[i]
    to_print = ""
    j = 0
    while j < len(person):
        name = person[j]
        to_print += name + " "
        j += 1
    print(to_print)
    i += 1'''

person = {
    'first_name': 'Sean',
    'last_name': 'Granier',
    'age': 34
}

'''print(person['first_name'])

print(person['last_name'])

print(person['age'])

person['cell_number'] = '555-5555'



print(person.keys())

print(person.values())'''

# Create a script that a user questions in the command line. The script should follow the outlined specs.
# miles to drive
# gallons-per-mile usage of the car
# price per gallon of fuel
# Caluclate the cost of the trip and display it to the user in the command line.


# travel distance 100 miles
'''miles = int(input('How many miles did you drive?: '))
# fuel consumption 30 miles per gallon
fuel = int(input('How many miles to the gallon does your vehicle get?: '))
# Price per gallon $1.20 per gallon
price = float(input('How much was the cost of fuel per gallon?: '))

fuel_needed = miles / fuel

fuel_cost = fuel_needed * price

print(f'your trip costed you ${fuel_cost}')'''

# Define my_stuff
'''my_stuff = ['apple', 'keys', 'book', 45.5]
# Define nums
nums = list(range(1, 100))


print(my_stuff, nums)'''

# Character Input
# Create a program that asks the user to enter their name and their age.
# Print out a message addressed to them that tells them the year that they will turn 100 years old.

'''name = input("What is your name?: ")
age = int(input("How old are you?: "))
future = 100 - age

from datetime import date
current_date = date.today()
print(f'Hey {name} when you turn 100 years old it will be the year {current_date.year + future}')'''

# Odd Or Even
# Ask the user for a number. Depending on whether the number is even or odd, print out an appropriate message to the user.
# Hint: how does an even / odd number react differently when divided by 2?

'''num = int(input('Type in a number please: '))

if num % 2 == 0:
    print('Your number is even')
else:
    print('Your number is odd')'''

# Make a piece of code that converts from a numerical grade (1-100) to a letter grade (A, B, C, D, F).

'''grade = int(input('Enter in your grade: '))

if grade >= 90:
    print('A')
elif grade >= 80:
    print('B')
elif grade >= 75:
    print('C')
elif grade >= 70:
    print('D')
else:
    print('F')'''

# Take a list, say for example this one:
# a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
# and write a program that prints out all the elements of the list that are less than 5.

'''list = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]

for element in list:
    if element < 5:
        print(list[element])'''

# Create a program that asks the user for a number and then prints out a list of all the divisors of that number.
# (If you donâ€™t know what a divisor is, it is a number that divides evenly into another number.
# For example, 13 is a divisor of 26 because 26 / 13 has no remainder.)

'''num = int(input('please enter a number: '))

list_range = list(range(1, num+1))

divisor_list = []

for number in list_range:
    if num % number == 0:
        divisor_list.append(number)

print(divisor_list)'''

'''for number in range(7, 1, -1):
    print(number)

nums = range(1, 5)
print(nums)'''

'''clean = int(input("How many times do I have to tell you? "))

for c in range(clean):
    print("clean up your room! ")'''

'''for num in range(1, 21):
    if num == 4 or num == 13:
        print("unlucky")
    if num % 2 == 0:
        print("even")
    else:
        print("Odd")'''

'''for num in range(1, 21):
    if num == 4 or num == 13:
        state = "unlucky"
    elif num % 2 == 0:
        state = "even"
    else:
        state = "odd"
    print(f"{num} is {state}")'''

'''msg = input("What's the secret password? ")
while msg != "bananas":
    print("wrong!")
    msg = input("What's the secret password? ")
print("correct")'''

'''for num in range(1, 11):
    print(num)'''

'''num = 1
while num < 11:
    print(num)
    num += 1'''

'''for num in range(1, 21):
    print("#" * num)'''  # triangle for loop

'''times = 1

while times < 220:
    print("#" * times)
    times += 1'''

'''msg = input("Say something: ")

while msg != "stop copying me!":
    print(msg)
    msg = input()'''

'''total_price = 0

new_sneakers = 50.00

total_price += new_sneakers

nice_sweater = 39.00
fun_books = 20.00
# Update total_price here:
total_price += nice_sweater
total_price += fun_books
print("The total price is", total_price)'''

# state = set("Mississippi")
# print(state)


# my_turtle = turtle.Turtle()
# my_turtle.forward(100)
# my_turtle.left(90)
# my_turtle.forward(100)
# my_turtle.left(90)
# my_turtle.forward(100)
# my_turtle.left(90)
# my_turtle.forward(100)
# my_turtle.left(90)


# star = turtle.Turtle()
#
# for i in range(50):
#     star.forward(50)
#     star.right(144)
# turtle.done()

# ninja = turtle.Turtle()
#
# ninja.speed(10)
#
# for i in range(180):
#     ninja.forward(100)
#     ninja.right(30)
#     ninja.forward(20)
#     ninja.left(60)
#     ninja.forward(50)
#     ninja.right(30)
#
#     ninja.penup()
#     ninja.setposition(0, 0)
#     ninja.pendown()
#
#     ninja.right(2)
#
# turtle.done()


# my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#
# for num in my_list:
#     if num % 2 == 0:
#         print(num, "Even")
#     else:
#         print(num, "Odd")

# my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#
# list_sum = 0
#
# for num in my_list:
#     list_sum = list_sum + num
# print(list_sum)

# my_string = "mustard is yellow"
#
# for letter in my_string:
#     print(letter)

# tup = (1, 2, 3,)
#
# for item in tup:
#     print(item)

# my_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]  # tuples inside a list

# for item in my_list:
#     print(item)

# for a, b in my_list:
#     print(a)

# Iterate through a dictionary

# d = {"k1": 1, "k2": 2, "k3": 3}
# for item in d:
#     print(item)

# d = {"k1": 1, "k2": 2, "k3": 3}
# for item in d.items():
#     print(item)

# d = {"k1": 1, "k2": 2, "k3": 3}
# for key, value in d:
#     print(value)

# d = {"k1": "yes", "k2": "no", "k3": "maybe"}
#
# for key, values in d.items():
#     print(d)

# x = 0
#
# while x < 5:
#     print(f"The current value of x is {x}")
#     x += 1
#
# else:
#     print("x is not less than 5")

# x = [1, 2, 3]
#
# for item in x:
#     pass
#
# print("end of script")

# for num in range(2, 11, 2):
#     print(num)


####### LEARN PYTHON THE HARD WAY ########

#
# # a variable set to the number 10
# types_of_people = 10
#
# # another variable called x set to an "f" string. Which also holds the first variable inside of it.
# x = f"There are {types_of_people} types of people."
# # variable set to the string "binary"
# binary = "binary"
# # a variable set to the string "don't"
# do_not = "don't"
# # a variable set to an "f" string with 2 variables set
# y = f"Those who know {binary} and those who {do_not}."
# # print the variable x
# print(x)
# # print the variable y
# print(y)
#
# # print the f string with the variable x within it
# print(f"I said: {x}")
# # print another f string with the variable y within it
# print(f"I also said '{y}'")
#
# # variable hilarious set to the boolean False
# hilarious = False
# # a variable set to a string asking a question with a format function
# joke_evaluation = "Isn't that joke so funny?! {}"
# # prints the variable and the format function with the argument hilarious
# print(joke_evaluation.format(hilarious))
#
# # variable w set to a string
# w = "This is the left side of..."
# # variable e set to a string
# e = "a string with a right side."
#
# # using the + operator concatenates the 2 varibales into one longer one
# print(w + e)


## EXERCISE 7 ##
#
# # print a string
# print("Mary had a little lamb.")
#
# # print a string with "snow" as the string
# print("it's fleece was white as {}.".format("snow"))
# # print a string
# print("And everywhere that mary went")
# # print a string dot the using the multiplication operator times it by 10 to print .......... 10 dots
# print("." * 12)
# # this whole step is variables for each individual letter. Then concatenating each variable
# end1 = "C"
# end2 = "h"
# end3 = "e"
# end4 = "e"
# end5 = "s"
# end6 = "e"
# end7 = "B"
# end8 = "u"
# end9 = "r"
# end10 = "g"
# end11 = "e"
# end12 = "r"
#
# # watch end = ' ' at the end. try removing it to see what happens
# # = ' ' connects the 2 prints on to the same line
# print(end1 + end2 + end3 + end4 + end5 + end6, end=' ')
# print(end7 + end8 + end9 + end10 + end11 + end12)

## EXERCISE 8 ##

# the variable formatter set to a string of 4 curly braces
# formatter = "{} {} {} {}"
# # all 5 prints a being formatted to the variable .format which  then inserts the argument to the set amount of curly braces
# print(formatter.format(1, 2, 3, 4))
# print(formatter.format("one", "two", "three", "four"))
# print(formatter.format(True, False, False, True))
# print(formatter.format(formatter, formatter, formatter, formatter))
# print(formatter.format(
#     "This is my",
#     "attempt to learn how to code",
#     "so I can then",
#     "leverage my skill to reach F.I.R.E"
# ))

## EXERCISE 9 ##
# days = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10"
# # the variable "days" set to the days of the week
# week_days = "Mon Tue Wed Thu Fri Sat Sun"
# # the variable "months" set to the months of the year with newline "\n" set to create each month on a new line
# months = "\nJan\nFeb\nMar\nApr\nMay\nJun\nJul\nAug"
#
# print("Here is the days: ", days)
# # a print function with a string and calling the variable "days"
# print("Here are the week days: ", week_days)
# # a print function with a string and calling the variable "months"
# print("Here are the months: ", months)
# # a print function with 3 double-quotes to write really long text in a string
# print("""
# There's something going on here.
# With three double-quotes.
# We'll be able to type as much as we like.
# Even 4 lines if we want, or 5, or 6.
# """)


## EXERCISE  10 ##
#
# # variable set to "tabby_cat. The special character Tab \t
# tabby_cat = "\t I'm tabbed in."
# # variable set, splits the string in 2 lines new line \n
# persian_cat = "I'm split\non a line."
# # adding the \\ which gives you the backslash \
# backslash_cat = "I'm \\ a \\ cat"
# # adding my own code
# item = "cat yarn"
#
# # 3 double quotes, tabs with * to create a visual list
# # splits catnip from grass onto a new line
# fat_cat = f'''
# I'll do a list:
# \t* {item}
# \t* cat food
# \t* fishies
# \t* catnip\n\t* Grass
# '''
# # prints each variable
# print(tabby_cat)
# print(persian_cat)
# print(backslash_cat)
# print(fat_cat)


## EXERCISE 11 ##

# # prints out a question
# print("How old are you?", end=' ')
# # age is assigned to input() which is collected by the user. ex: user input 34 now age = 34
# age = input()
# # prints a string question and saves user data to the variable "height"
# print("How tall are you?", end=' ')
# height = input()
# print("How much do you weigh?", end=' ')
# weight = input()
# # print f string with variables age, height, and weight which was gathered for the user input
# print(f"So, you're {age} years old, {height} tall and {weight} pounds")


## I BUILT A TWITTTER BOT BITCHES!!!!

# twitter_API.update_status("snesBot activated")

# hashtag = "#snes"
# tweet_number = 10
#
# tweets = tweepy.Cursor(twitter_API.search, hashtag).items(tweet_number)
#
#
# def searchBot():
#     for tweet in tweets:
#         try:
#             tweet.retweet()
#             print("RT Done")
#         except tweepy.TweepError as e:
#             print(e.reason)
#             time.sleep(15)
#
#
# searchBot()


## EXERCISE 12 ##
# variable age set to a input to ask user a question
# age = input("How old are you? ")
# height = input("How tall are you? ")
# weight = input("How much do you weigh? ")
# # print function with an f string using the variables to place the users input into the string output
# print(f"So, you're {age} years old {height} tall and you weigh {weight} pounds")

## EXERCISE 13 ##


# from sys import argv
#
# script, first, second, third, fourth = argv
#
# print("this script is called:", script)
# print("Your first variable is:", first)
# print("Your second variable is:", second)
# print("your third variable is:", third)
# print(f"use the {fourth} with this one")

## EXERCISE 14 ##
# from the system imports argv
# the commandline variables to run
# script, user_name = argv
# prompt = '8====>'
# # prints an f-string with the cml variables
# print(f"Hi {user_name}, I'm the {script} script.")
# print("I'd like to as you a few questions.")
# print(f"Do you like me {user_name}?")
# likes = input(prompt)
#
# print(f"Where do you live {user_name}?")
# lives = input(prompt)
#
# print("What kind of computer do you have?")
# computer = input(prompt)
#
# print(f'''
# Alright, so you said {likes} about liking me.
# You live in {lives}. Not sure where that is.
# And you have a {computer}. Nice! ''')

## EXERCISE 15 ##
# calling from system to import argv
# from sys import argv
# the variables to pass through the cml ( python3 practice from_file.txt )
# script, filename = argv
# # a variable set to the open function with the filename as the parameter
# txt = open(filename)
# # prints an f-string "Here's your file" with the variable "from_file.txt"
# print(f"Here's your file {filename}: ")
# # prints the txt file to the cml:
# # "This is stuff I typed into a file.
# # It is really cool stuff.
# # Lots and lots of fun to have in here."
# print(txt.read())
#
# # asks user to type file name in again
# print("Typed the filename again:")
# # a new variable with input showing > as a marker. Also waiting on the user to type in file name
# file_again = input(">")
#
# # new variable set to the open function and open the txt file
# txt_again = open(file_again)
# # prints "reads" the txt file and displays it to the cml
# print(txt_again.read())


## EXERCISE 16 ##

# # from sys import argv
#
# script, filename = argv
#
# print(f"We're going to erase {filename}.")
# print("If you don't want that, hit CTRL-C (^C).")
# print("If you do want that, hit RETURN.")
#
# input("?")
#
# print("Opening the file...")
# target = open(filename, "w")
#
# print("Truncating the file. Goodbye!")
# target.truncate()
#
# print("Now Im going to ask you for three lines.")
#
# line1 = input("line1: ")
# line2 = input("line2: ")
# line3 = input("line3: ")
#
# print("Im going to write these to the file.")
#
# target.write(line1)
# target.write("\n")
# target.write(line2)
# target.write("\n")
# target.write(line3)
# target.write("\n")
#
#
# print("And finally, we close it.")
# target.close()


## EXERCISE 17 ##

# script, from_file, to_file = argv

# in_file = open(from_file)
# indata = in_file.read()
#
# # print(f"The input file is {len(indata)} bytes long.")
#
# # print(f"Does the output file exist? {exists(to_file)}")
# print("Ready, hit RETURN to continue, CTRL-C to abort.")
# input()
#
# out_file = open(to_file, 'w')
# out_file.write(indata)
#
#
# print("Alright, all done.")

# out_file.close()
# in_file.close()


# script, from_file, to_file = argv
#
# in_file = open(from_file)
# indata = in_file.read()
#
# # print(f"The input file is {len(indata)} bytes long.")
#
# print(f"Does the output file exist? {exists(to_file)}")
# print("Ready, hit RETURN to continue, CTRL-C to abort.")
# input()
#
# out_file = open(to_file, 'w')
# out_file.write(indata)
#
#
# print("Alright, all done.")

## EXERCISE 18 ##

# ok, this *args is actually pointless
# def print_two(*args):
#     arg1, arg2 = args
#     print(f"arg1: {arg1}, arg2: {arg2}")
#
#
# print_two("Sean", "Gee")
#
#
# # we can just do this
# def print_two_again(arg1, arg2):
#     print(f"arg1: {arg1}, arg2: {arg2}")
#
#
# print_two_again("Sean", 560)
#
#
# # this one takes no arguments
# def print_one(name):
#     print(f"arg1: {name}")
#
#
# print_one("Sean")
#
#
# def print_none():
#     print("I got nothin")
#
#
# print_none()


"""EXERCISE 19"""

# def cheese_and_crackers(cheese_count, boxes_of_crackers):
#     print(f"You have {cheese_count} cheeses!")
#     print(f"You have {boxes_of_crackers} boxes of crackers")
#     print("Man that's enough for a party")
#     print("Get a blanket.\n")
#
#
# print("We can just give the function numbers directly")
# cheese_and_crackers(20, 30)
#
#
# print("OR, we can use a variable from our script:")
# amount_of_cheese = 10
# amount_of_crackers = 50
#
# cheese_and_crackers(amount_of_cheese, amount_of_crackers)
#
#
# print("We can even do math inside too:")
# cheese_and_crackers(10 + 20, 5 + 6)
#
# print("And we can combine the two variables and math")
# cheese_and_crackers(amount_of_cheese + 100, amount_of_crackers + 1000)


''' EXERCISE 20 '''
# the command for the cml example: practice cool.txt
# script, input_file = argv


# defining a function print_all to print everything from the file
# def print_all(f):
#     print(f.read())
#
#
# # define a function holding the variable "f" runs the variable .seek(0)
# def rewind(f):
#     # "f.seek(3)" starts reading from the 3rd character
#     f.seek(0)
#
# # prints the numbered list
# def print_a_line(line_count, f):
#     print(line_count, f.readline())
#
#
# current_file = open(input_file)
#
# print("First let's print the whole file:\n")
#
# print_all(current_file)
#
# print("Now let's rewind, kind of like a tape.")
#
# rewind(current_file)
#
# print("Let's print three lines: ")
#
# current_line = 1
# print_a_line(current_line, current_file)
#
# current_line = current_line + 1
# print_a_line(current_line, current_file)
#
# current_line = current_line + 1
# print_a_line(current_line, current_file)

''' EXERCISE 21  '''

#
# # defining a function with a,  b as arguments
# def add(a, b):
#     # Prints an f-string replacing the arguments with values EX: "ADDING 30 + 5
#     print(f"ADDING {a} + {b}")
#     #
#     return a + b
#
#
# def subtract(a, b):
#     print(f"SUBTRACTING {a} - {b}")
#     return a - b
#
#
# def multiply(a, b):
#     print(f"MULTIPLYING {a} * {b}")
#     return a * b
#
#
# def divide(a, b):
#     print(f"DIVIDING {a} / {b}")
#     return a / b
#
#
# print("Let's do some math with some functions!")
# # the function "add" is now a new function called "age"
# age = add(30, 5)
# print(">>>> age: ", age)
# height = subtract(78, 4)
# print(">>>> height: ", height)
# weight = multiply(90, 2)
# print(">>>> weight: ", weight)
# iq = divide(100, 2)
# print(">>>> iq: ", iq)
# # then the new functions are called
# print(f"Age: {age}, Height: {height}, Weight: {weight}, IQ: {iq}")
#
# # A puzzle for the extra credit, type it in anyway.
# print("Here is a puzzle")
#
# what = add(age, subtract(height, multiply(weight, divide(iq, 2))))
#
# print("That becomes: ", what, "Can you do it by hand?")


''' EXERCISE 23 '''

# script, input_encoding, error = sys.argv
#
#
# def main(language_file, encoding, errors):
#     line = language_file.readline()
#
#     if line:
#         print_line(line, encoding, errors)
#         return main(language_file, encoding, errors)
#
#
# def print_line(line, encoding, errors):
#     next_lang = line.strip()
#     raw_bytes = next_lang.encode(encoding, errors=errors)
#     cooked_string = raw_bytes.decode(encoding, errors=errors)
#
#     print(raw_bytes, "<===>", cooked_string)
#
#
# languages = open("languages.txt", encoding="utf-8")
#
# main(languages, input_encoding, error)


'''EXERCISE 24'''
# print the string
print("Let's practice everything")
# print the string that introduces escape characters newline and tab
print('You\'d need to know \'bout escapes with \\ that do:')
print('\n newlines and \t tabs')
# variable "poem" with ''' ''' for a lot of text also using tab and newline
poem = '''
\tThe lovely world
with logic so firmly planted
cannot discern \n the needs of love
nor comprehend passion from intuition
and requires an explanation
\n\t\twhere there is none.   
'''

print("--------------")
print(poem)
print("--------------")
# variable with numbers and arithmetic operators
five = 10 - 2 + 3 - 6
# printing an f-string and calling the "five" variable
print(f"This would be five: {five}")


# defining a function called secret_formula with "started" as the input parameter.
# A series of variables inside the code block using math
# def secret_formula(started):
#     # the variable "jelly_bean" is equal to "started * 500 "
#     jelly_beans = started * 500
#     jars = jelly_beans / 1000
#     crates = jars / 100
#     return jelly_beans, jars, crates
#
#
# start_point = 1
# beans, jars, crates = secret_formula(start_point)
#
# print("With a starting point of: {}".format(start_point))
# print(f"We'd have {beans} beans, {jars} jars, and {crates} crates.")
#
# start_point = start_point / 10
#
# print("We can also do that this way")
# formula = secret_formula(start_point)
# # this is an easy way to apply a list to a format string
# print("We'd have {} beans, {} jars, and {} crates.".format(*formula))

def secret_formula(started):
    # the variable "jelly_bean" is equal to "started" which will later be changed to start_point
    jelly_beans = started * 500
    jars = jelly_beans / 1000
    crates = jars / 100
    return jelly_beans, jars, crates


start_point = 10
beans, jars, crates = secret_formula(start_point)

print("With a starting point of: {}".format(start_point))
print(f"We'd have {beans} beans, {jars} jars, and {crates} crates.")

start_point = start_point / 10

print("We can also do that this way")
formula = secret_formula(start_point)
# this is an easy way to apply a list to a format string
print("We'd have {} beans, {} jars, and {} crates.".format(*formula))


